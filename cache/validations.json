{
  "version": "3.2",
  "log": [
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "ce3ff2e2593d3349d9280b86023997c522d165eca60f0ba15ec328d91fc9e05e",
          "withoutMetadata": "79048ce1808914314e2185a36708f1c980c8181772cfbf04f155b0f1e47b90fa",
          "linkedWithoutMetadata": "79048ce1808914314e2185a36708f1c980c8181772cfbf04f155b0f1e47b90fa"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "buyTokensIndividual(uint256,uint256)",
          "sellTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)",
              "src": "contracts/Vault.sol:38"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1056_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "4566ef5915a6aaf70a6e3bf237db76a1aa53ada92da40b5d394f426a625ef887",
          "withoutMetadata": "79048ce1808914314e2185a36708f1c980c8181772cfbf04f155b0f1e47b90fa",
          "linkedWithoutMetadata": "79048ce1808914314e2185a36708f1c980c8181772cfbf04f155b0f1e47b90fa"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "buyTokensIndividual(uint256,uint256)",
          "sellTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)",
              "src": "contracts/Vault.sol:38"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1056_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "6bc0adc4f1b7debf78822ecca859de28761fc656de4744819ccfddf3c3a91926",
          "withoutMetadata": "7f1158c25c931019431402af00c9c1a037f3ecbd8d48df5af39a72080d853912",
          "linkedWithoutMetadata": "7f1158c25c931019431402af00c9c1a037f3ecbd8d48df5af39a72080d853912"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "buyTokensIndividual(uint256,uint256)",
          "sellTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)",
              "src": "contracts/Vault.sol:38"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1056_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "5c318a19ac5518a409b0b92b04e4b9e94d35f9da320bfe089343ca915b749063",
          "withoutMetadata": "b2bb3edb16d164034a4d87dd9c1cd19e52898c23072a5b54b0a95b0e9d9e8061",
          "linkedWithoutMetadata": "b2bb3edb16d164034a4d87dd9c1cd19e52898c23072a5b54b0a95b0e9d9e8061"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "buyTokensIndividual(uint256,uint256)",
          "sellTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)",
              "src": "contracts/Vault.sol:38"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1056_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "29c755f1501b590acfcfb0cddc3bbc36a6acecb08b0a674d5cbda27f30af64b1",
          "withoutMetadata": "079dc3f2f2bb728b4fa2fef76e97c708002487575a9097c4e371a5e8cf7509be",
          "linkedWithoutMetadata": "079dc3f2f2bb728b4fa2fef76e97c708002487575a9097c4e371a5e8cf7509be"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "buyTokensIndividual(uint256,uint256)",
          "sellTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)",
              "src": "contracts/Vault.sol:38"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1056_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "b8ac04f0de3e730d9d80080bdb2ba161728a9976e055aded660845af0dbc42ec",
          "withoutMetadata": "3e8c0c94e7745caf63d0adddcab94ea374c673fab9f561a79ea6345c9a9487ab",
          "linkedWithoutMetadata": "3e8c0c94e7745caf63d0adddcab94ea374c673fab9f561a79ea6345c9a9487ab"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721URIStorage": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:11",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721URIStorage",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "4633e7668bddc17b175766de0a0c8d6219b6304d2394c04405f7164bbc4dafd7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:16",
        "version": {
          "withMetadata": "524a4e11863b7004319512cc2e435f63ef4189481251c0b5cf0755649468e04e",
          "withoutMetadata": "30e13af9a2303d2d1b53bf01673c0bf4a08bf74f12986ff9f6c16d7f737d6b93",
          "linkedWithoutMetadata": "30e13af9a2303d2d1b53bf01673c0bf4a08bf74f12986ff9f6c16d7f737d6b93"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:18"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:29"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)2993_storage)",
              "src": "contracts/Buckets.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)2993_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)2993_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "getNFTokenAddr(uint256)",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FixedMath": {
        "src": "contracts/FixedMath.sol:5",
        "version": {
          "withMetadata": "c084e63dc9a5aa1b34bc3fe902ca674ca64eea9c24caa463d882c4e3886627c1",
          "withoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce",
          "linkedWithoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "fixed1()",
          "fixed2()",
          "toFixed(int256)",
          "integer(int256)",
          "fractional(int256)",
          "mulPrecision()",
          "add(int256,int256)",
          "multiply(int256,int256)",
          "reciprocal(int256)",
          "divide(int256,int256)",
          "sqrt(int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Greeter": {
        "src": "contracts/Greeter.sol:6",
        "version": {
          "withMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1",
          "withoutMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1",
          "linkedWithoutMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1"
        },
        "inherit": [],
        "libraries": [
          "console"
        ],
        "methods": [
          "(string)",
          "greet()",
          "setGreeting(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Greeter",
            "src": "contracts/Greeter.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Greeter",
              "label": "greeting",
              "type": "t_string_storage",
              "src": "contracts/Greeter.sol:7"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Minter": {
        "src": "contracts/Minter.sol:8",
        "version": {
          "withMetadata": "686cd28732b1d66fae28a88574bb8221055c502b2c9e0383c0d3d4a1ec26e984",
          "withoutMetadata": "3c0e0bc9f14b37ca731b3960ba4af3521d772c191c4c5d23d99048158afde083",
          "linkedWithoutMetadata": "3c0e0bc9f14b37ca731b3960ba4af3521d772c191c4c5d23d99048158afde083"
        },
        "inherit": [
          "ERC721URIStorage",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "mint(address)",
          "safeTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Minter",
            "src": "contracts/Minter.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Minter",
              "label": "_tokenIds",
              "type": "t_struct(Counter)2607_storage",
              "src": "contracts/Minter.sol:10"
            }
          ],
          "types": {
            "t_struct(Counter)2607_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "5c318a19ac5518a409b0b92b04e4b9e94d35f9da320bfe089343ca915b749063",
          "withoutMetadata": "b2bb3edb16d164034a4d87dd9c1cd19e52898c23072a5b54b0a95b0e9d9e8061",
          "linkedWithoutMetadata": "b2bb3edb16d164034a4d87dd9c1cd19e52898c23072a5b54b0a95b0e9d9e8061"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "buyTokensIndividual(uint256,uint256)",
          "sellTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)4127_storage)",
              "src": "contracts/Vault.sol:38"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)4127_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)4127_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "XChainVault": {
        "src": "contracts/XChainVault.sol:7",
        "version": {
          "withMetadata": "640e663a62db5f385edeaa87481f6c0c05ee180a24d1b796c8659ab674d92e15",
          "withoutMetadata": "fe41b140642ad61f4eaabfd5aa599fd0b2be43ca73669084048f949721d7abb0",
          "linkedWithoutMetadata": "fe41b140642ad61f4eaabfd5aa599fd0b2be43ca73669084048f949721d7abb0"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "grantOracle(address)",
          "onERC721Received(address,address,uint256,bytes)",
          "releaseNFT(address,uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "XChainVault",
            "src": "contracts/XChainVault.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/XChainVault.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "XChainVault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/XChainVault.sol:20"
            },
            {
              "contract": "XChainVault",
              "label": "chainId",
              "type": "t_uint256",
              "src": "contracts/XChainVault.sol:22"
            },
            {
              "contract": "XChainVault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)5251_storage)",
              "src": "contracts/XChainVault.sol:25"
            },
            {
              "contract": "XChainVault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/XChainVault.sol:28"
            },
            {
              "contract": "XChainVault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/XChainVault.sol:29"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)5251_storage)": {
              "label": "mapping(uint256 => struct XChainVault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)5251_storage": {
              "label": "struct XChainVault.RecievedNFT",
              "members": [
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "wEth": {
        "src": "contracts/wEth.sol:6",
        "version": {
          "withMetadata": "66a9f630e16307f8e45dfeddb5444a8652da1046cc71e5adb384318b53953d5d",
          "withoutMetadata": "afc6d7c3ac23ff1766e927bd390cfa1c3370c26cad3e972a09784ffba80b6bf7",
          "linkedWithoutMetadata": "afc6d7c3ac23ff1766e927bd390cfa1c3370c26cad3e972a09784ffba80b6bf7"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "give(uint256)",
          "giveAccount(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "wEth",
            "src": "contracts/wEth.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}