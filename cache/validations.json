{
  "version": "3.2",
  "log": [
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "8480fbe0286a633d0dadd913b36fcb6fdb720123f5fb3f5ceadcd45fc82a9f2e",
          "withoutMetadata": "ccc3ece823e3fcf07eadd4f6f080f5ab032d56cf8ba0e2f2a72fb5dc85c7b7d7",
          "linkedWithoutMetadata": "ccc3ece823e3fcf07eadd4f6f080f5ab032d56cf8ba0e2f2a72fb5dc85c7b7d7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "3afb4b60aaa857803dbecf6db5f9802cd76dd83f20496c56a43d64f93cc66184",
          "withoutMetadata": "ccc3ece823e3fcf07eadd4f6f080f5ab032d56cf8ba0e2f2a72fb5dc85c7b7d7",
          "linkedWithoutMetadata": "ccc3ece823e3fcf07eadd4f6f080f5ab032d56cf8ba0e2f2a72fb5dc85c7b7d7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "29c755f1501b590acfcfb0cddc3bbc36a6acecb08b0a674d5cbda27f30af64b1",
          "withoutMetadata": "079dc3f2f2bb728b4fa2fef76e97c708002487575a9097c4e371a5e8cf7509be",
          "linkedWithoutMetadata": "079dc3f2f2bb728b4fa2fef76e97c708002487575a9097c4e371a5e8cf7509be"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "buyTokensIndividual(uint256,uint256)",
          "sellTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)",
              "src": "contracts/Vault.sol:38"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1056_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "caffa4875be326fb738c59ad7fc6a95967464eb5af8ff26cb461d77183a69541",
          "withoutMetadata": "852db8afdbcaa78ce4c8b974bc66cb5b7febbd71dc9d7e777fa826a8535ee50e",
          "linkedWithoutMetadata": "852db8afdbcaa78ce4c8b974bc66cb5b7febbd71dc9d7e777fa826a8535ee50e"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "buyTokensIndividual(uint256,uint256)",
          "sellTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)",
              "src": "contracts/Vault.sol:38"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1056_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "d3ba73d1fd225b587fba5113ae9debcfa5bec715816652e36dd0394738c5a072",
          "withoutMetadata": "ccc3ece823e3fcf07eadd4f6f080f5ab032d56cf8ba0e2f2a72fb5dc85c7b7d7",
          "linkedWithoutMetadata": "ccc3ece823e3fcf07eadd4f6f080f5ab032d56cf8ba0e2f2a72fb5dc85c7b7d7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)1020_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)1020_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)1020_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "e2a05029c08c73d06c126eec9278586cc2880297f1675838e3359b6c196150d1",
          "withoutMetadata": "4474a6c25f6f4af351ddcf10cde455fce60b80f0959d1c6b42efc18b4f1b2e15",
          "linkedWithoutMetadata": "4474a6c25f6f4af351ddcf10cde455fce60b80f0959d1c6b42efc18b4f1b2e15"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "buyTokensIndividual(uint256,uint256)",
          "sellTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1554_storage)",
              "src": "contracts/Vault.sol:38"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1554_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1554_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "cfeac7408e7cfd3221bf3cd6a4ab49c9101a2cc4e0b6b4dd53a40aea666d4789",
          "withoutMetadata": "6e05bc35df929bb9a642a56e624d3c70cb64f64647ed059d43baa2c888667343",
          "linkedWithoutMetadata": "6e05bc35df929bb9a642a56e624d3c70cb64f64647ed059d43baa2c888667343"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "4a6278ae69f188c8456254424f1c53a46ffbb28cb3508b4bf87ebfeea13a5767",
          "withoutMetadata": "4474a6c25f6f4af351ddcf10cde455fce60b80f0959d1c6b42efc18b4f1b2e15",
          "linkedWithoutMetadata": "4474a6c25f6f4af351ddcf10cde455fce60b80f0959d1c6b42efc18b4f1b2e15"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "buyTokensIndividual(uint256,uint256)",
          "sellTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)",
              "src": "contracts/Vault.sol:38"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1056_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "018a41bc9d0367d57b4cfd1ba91e6841b01a6639319a096763498511e1bb9d0b",
          "withoutMetadata": "835b0b8de97918af38a5488892322b88f38c701311a22cf5620fdadd6d8075d5",
          "linkedWithoutMetadata": "835b0b8de97918af38a5488892322b88f38c701311a22cf5620fdadd6d8075d5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "e4aa299adf709d7006304c2941694b6063a09a3a12e43f8db8e479dc91d425ff",
          "withoutMetadata": "8012c6aed2fd1b22a7afe4ab134f7f9215b61d17c21dfbb784514b376579a600",
          "linkedWithoutMetadata": "8012c6aed2fd1b22a7afe4ab134f7f9215b61d17c21dfbb784514b376579a600"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "dcec53355a0c92a48fa2dd3fb469e5c4deb2afaeffbaaa2354549914063b6d09",
          "withoutMetadata": "caa88bbb9394de3da0435c99f8fe2f6c9ce04ef0a917b074409e50f330ea967b",
          "linkedWithoutMetadata": "caa88bbb9394de3da0435c99f8fe2f6c9ce04ef0a917b074409e50f330ea967b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "35d22dd426f55c6e405e654ac84f775746dc0ad3f2ddb7fbed6e9dd4927dee56",
          "withoutMetadata": "17b391c07ae1cdf19d41a9c880db674fbfe4e02da15d3c94b696f11698193c42",
          "linkedWithoutMetadata": "17b391c07ae1cdf19d41a9c880db674fbfe4e02da15d3c94b696f11698193c42"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)1020_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)1020_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)1020_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "9fca6f0228c04f9e6e76ac482aa7f24e38d7204029bbcbd523f5e236fdbb53ba",
          "withoutMetadata": "e1a2e053924b193e856be4244fea0713da857df56234856ede3f2281cba56a3d",
          "linkedWithoutMetadata": "e1a2e053924b193e856be4244fea0713da857df56234856ede3f2281cba56a3d"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "buyTokensIndividual(uint256,uint256)",
          "sellTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1540_storage)",
              "src": "contracts/Vault.sol:38"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1540_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1540_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "57f339c602e1ffc7e70e289c304441ba0a3bc678ab3edbd86aa5167d8407e3c1",
          "withoutMetadata": "e1a2e053924b193e856be4244fea0713da857df56234856ede3f2281cba56a3d",
          "linkedWithoutMetadata": "e1a2e053924b193e856be4244fea0713da857df56234856ede3f2281cba56a3d"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "buyTokensIndividual(uint256,uint256)",
          "sellTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)",
              "src": "contracts/Vault.sol:38"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1056_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "25321e455b370d473829a1e49e5eba5e43b0db70c165656b3b0328f27999b209",
          "withoutMetadata": "17b391c07ae1cdf19d41a9c880db674fbfe4e02da15d3c94b696f11698193c42",
          "linkedWithoutMetadata": "17b391c07ae1cdf19d41a9c880db674fbfe4e02da15d3c94b696f11698193c42"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "174ae80b291a33a48c7352b9220a3951f9147dd51c7bc8159e970010c1d51da1",
          "withoutMetadata": "fae6eaaedc5fa6d2cccc821b4243bda3dedb50bb73485eb8f49000d4d62b7c06",
          "linkedWithoutMetadata": "fae6eaaedc5fa6d2cccc821b4243bda3dedb50bb73485eb8f49000d4d62b7c06"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "1a24fea7b92e0a92a103fcca6f1eada92913f6408ce6ef1355be3867dce734fd",
          "withoutMetadata": "fae6eaaedc5fa6d2cccc821b4243bda3dedb50bb73485eb8f49000d4d62b7c06",
          "linkedWithoutMetadata": "fae6eaaedc5fa6d2cccc821b4243bda3dedb50bb73485eb8f49000d4d62b7c06"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "8b8bae03a07a493878b6f5d349b803d9e8f0d396e931359d159a7cdb46ff6f5c",
          "withoutMetadata": "3e29675bc9b7c747aaaa61a5d37b45d9eb96ab5abbc9771be789ef3b32a56d40",
          "linkedWithoutMetadata": "3e29675bc9b7c747aaaa61a5d37b45d9eb96ab5abbc9771be789ef3b32a56d40"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "0c12c911cd08b5a74b9ff780dba016f7959ffaa4f721d556e27d910936b75e6d",
          "withoutMetadata": "59e154fc835873f8670282536ee05c62a9e04e3c68d0663cd94ac279bf7a215c",
          "linkedWithoutMetadata": "59e154fc835873f8670282536ee05c62a9e04e3c68d0663cd94ac279bf7a215c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "70985e9bb96ee5d5a9d9a2e268edced75a1fbddb9e5ffe33f04f234fe8e3bfed",
          "withoutMetadata": "caa88bbb9394de3da0435c99f8fe2f6c9ce04ef0a917b074409e50f330ea967b",
          "linkedWithoutMetadata": "caa88bbb9394de3da0435c99f8fe2f6c9ce04ef0a917b074409e50f330ea967b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "db014db82dbe60cf50cada057f714494f2c9a540e4acb6cbbce5981ffad22d5f",
          "withoutMetadata": "abc8a4ca4676614ed6c1f6dafe3136fbaa0a69ad69a6918a31b986c488fb0c49",
          "linkedWithoutMetadata": "abc8a4ca4676614ed6c1f6dafe3136fbaa0a69ad69a6918a31b986c488fb0c49"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "fe39485b1e872da0805e036a583ba8b3c9a9128e7fa0092f5a8b752fb84936ae",
          "withoutMetadata": "abc8a4ca4676614ed6c1f6dafe3136fbaa0a69ad69a6918a31b986c488fb0c49",
          "linkedWithoutMetadata": "abc8a4ca4676614ed6c1f6dafe3136fbaa0a69ad69a6918a31b986c488fb0c49"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "687457692ae95c350ad2da5fbde89f3be6295ba51eb7f885cdda06aba5a8d798",
          "withoutMetadata": "a11e25e6c4b7965b0723ccaf0768162a3464ea3189f886dbc1ab7520ea2d0408",
          "linkedWithoutMetadata": "a11e25e6c4b7965b0723ccaf0768162a3464ea3189f886dbc1ab7520ea2d0408"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "8c6e480c9cd0d14f91afb38e505398eddb9a6ae107e95c274d59bc7d3e1a37eb",
          "withoutMetadata": "a11e25e6c4b7965b0723ccaf0768162a3464ea3189f886dbc1ab7520ea2d0408",
          "linkedWithoutMetadata": "a11e25e6c4b7965b0723ccaf0768162a3464ea3189f886dbc1ab7520ea2d0408"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "c415fbb9eb99afcdfa50dcb7f93d09a4e1ea9b3a6fe68e389c2eb2f06ad6c886",
          "withoutMetadata": "f69eafa0be345e5c2d831543962e17d96d65b0956c855c402d4d31f8b97f8d86",
          "linkedWithoutMetadata": "f69eafa0be345e5c2d831543962e17d96d65b0956c855c402d4d31f8b97f8d86"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "a622efcc68d9e44465e4053ae560c23a4a4ec70249a83bcfc756f0dff88c3612",
          "withoutMetadata": "a11e25e6c4b7965b0723ccaf0768162a3464ea3189f886dbc1ab7520ea2d0408",
          "linkedWithoutMetadata": "a11e25e6c4b7965b0723ccaf0768162a3464ea3189f886dbc1ab7520ea2d0408"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "672a0751da0651907bae1bdc25fb78d50505348a553397504192fc3e7bf76bcf",
          "withoutMetadata": "6e0a1b5ca13d5a20fc6e90eea8f8befd053a91d5306cedd9ed5b137b3f7b168f",
          "linkedWithoutMetadata": "6e0a1b5ca13d5a20fc6e90eea8f8befd053a91d5306cedd9ed5b137b3f7b168f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "b097cc08db8d307b23c3a275f3466f6b1a21b46073d3768e53d0869e048afb2a",
          "withoutMetadata": "da2f50a8eb295ff3ec0e00d04fb7da11d59a151da2976cecacc67bcecfc15af2",
          "linkedWithoutMetadata": "da2f50a8eb295ff3ec0e00d04fb7da11d59a151da2976cecacc67bcecfc15af2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "5d942bf182e997461d19d923356bd0fd29a08b579b6e031cae8eb3b32af2c5ee",
          "withoutMetadata": "34689ed03da3a94aefc28351eaf9140ab18450bcc78c47beecac190aede8418c",
          "linkedWithoutMetadata": "34689ed03da3a94aefc28351eaf9140ab18450bcc78c47beecac190aede8418c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "5b6f5454c2f1c7969c165cf4c6305ddc5128584c1e6c654c33808eb301df30b6",
          "withoutMetadata": "abc8a4ca4676614ed6c1f6dafe3136fbaa0a69ad69a6918a31b986c488fb0c49",
          "linkedWithoutMetadata": "abc8a4ca4676614ed6c1f6dafe3136fbaa0a69ad69a6918a31b986c488fb0c49"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "441385c8eb388909dde892f4f8a567c27e6998e8c989489f723e9f4352c02338",
          "withoutMetadata": "c9ccd26e6de0b989f6ae21a31cbffb3491dc7fd8d74b25330dd4df6d7befd8ed",
          "linkedWithoutMetadata": "c9ccd26e6de0b989f6ae21a31cbffb3491dc7fd8d74b25330dd4df6d7befd8ed"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "00d5d09a0f400a56bb4a4681038164b6409ccb8255b536d288d91647599ed528",
          "withoutMetadata": "3ee9d2b7ba35d1975d1247ded0858d48a5c7a07563c08720e7612ef393809498",
          "linkedWithoutMetadata": "3ee9d2b7ba35d1975d1247ded0858d48a5c7a07563c08720e7612ef393809498"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "59b0d53446d50b5afb4c96bfbe381609665498bfa976d9b225071880a14d5853",
          "withoutMetadata": "8a13fdebda57710570f39b8bd890ef5328ee0b35c854ed6a500675d5691269ce",
          "linkedWithoutMetadata": "8a13fdebda57710570f39b8bd890ef5328ee0b35c854ed6a500675d5691269ce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberOfBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "810745385a2921dc53e90aa5ccf3a85194beb81bf99f36ebd867ec0a15e2f31c",
          "withoutMetadata": "9ade099df90b995d17fe533f6a1e69c0c8cf4dd747053811bd5b018112c0a356",
          "linkedWithoutMetadata": "9ade099df90b995d17fe533f6a1e69c0c8cf4dd747053811bd5b018112c0a356"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)",
          "getNumberOfBucketsCreated()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "b8ac04f0de3e730d9d80080bdb2ba161728a9976e055aded660845af0dbc42ec",
          "withoutMetadata": "3e8c0c94e7745caf63d0adddcab94ea374c673fab9f561a79ea6345c9a9487ab",
          "linkedWithoutMetadata": "3e8c0c94e7745caf63d0adddcab94ea374c673fab9f561a79ea6345c9a9487ab"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721URIStorage": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:11",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721URIStorage",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "4633e7668bddc17b175766de0a0c8d6219b6304d2394c04405f7164bbc4dafd7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "24fc5b50ffd0f0c7b88153a4d35c3ec8a0117e0e930401d1cdb804c73ebbb60d",
          "withoutMetadata": "9710a217a0925c0ace588af1f00de5c5266913314cb071e429cbbcfc7c9c5b84",
          "linkedWithoutMetadata": "9710a217a0925c0ace588af1f00de5c5266913314cb071e429cbbcfc7c9c5b84"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)2986_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)2986_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)2986_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FixedMath": {
        "src": "contracts/FixedMath.sol:5",
        "version": {
          "withMetadata": "c084e63dc9a5aa1b34bc3fe902ca674ca64eea9c24caa463d882c4e3886627c1",
          "withoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce",
          "linkedWithoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "fixed1()",
          "fixed2()",
          "toFixed(int256)",
          "integer(int256)",
          "fractional(int256)",
          "mulPrecision()",
          "add(int256,int256)",
          "multiply(int256,int256)",
          "reciprocal(int256)",
          "divide(int256,int256)",
          "sqrt(int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Greeter": {
        "src": "contracts/Greeter.sol:6",
        "version": {
          "withMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1",
          "withoutMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1",
          "linkedWithoutMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1"
        },
        "inherit": [],
        "libraries": [
          "console"
        ],
        "methods": [
          "(string)",
          "greet()",
          "setGreeting(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Greeter",
            "src": "contracts/Greeter.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Greeter",
              "label": "greeting",
              "type": "t_string_storage",
              "src": "contracts/Greeter.sol:7"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Minter": {
        "src": "contracts/Minter.sol:8",
        "version": {
          "withMetadata": "686cd28732b1d66fae28a88574bb8221055c502b2c9e0383c0d3d4a1ec26e984",
          "withoutMetadata": "3c0e0bc9f14b37ca731b3960ba4af3521d772c191c4c5d23d99048158afde083",
          "linkedWithoutMetadata": "3c0e0bc9f14b37ca731b3960ba4af3521d772c191c4c5d23d99048158afde083"
        },
        "inherit": [
          "ERC721URIStorage",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "mint(address)",
          "safeTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Minter",
            "src": "contracts/Minter.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Minter",
              "label": "_tokenIds",
              "type": "t_struct(Counter)2607_storage",
              "src": "contracts/Minter.sol:10"
            }
          ],
          "types": {
            "t_struct(Counter)2607_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "9fca6f0228c04f9e6e76ac482aa7f24e38d7204029bbcbd523f5e236fdbb53ba",
          "withoutMetadata": "e1a2e053924b193e856be4244fea0713da857df56234856ede3f2281cba56a3d",
          "linkedWithoutMetadata": "e1a2e053924b193e856be4244fea0713da857df56234856ede3f2281cba56a3d"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "buyTokensIndividual(uint256,uint256)",
          "sellTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)4077_storage)",
              "src": "contracts/Vault.sol:38"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)4077_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)4077_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "XChainVault": {
        "src": "contracts/XChainVault.sol:7",
        "version": {
          "withMetadata": "640e663a62db5f385edeaa87481f6c0c05ee180a24d1b796c8659ab674d92e15",
          "withoutMetadata": "fe41b140642ad61f4eaabfd5aa599fd0b2be43ca73669084048f949721d7abb0",
          "linkedWithoutMetadata": "fe41b140642ad61f4eaabfd5aa599fd0b2be43ca73669084048f949721d7abb0"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "grantOracle(address)",
          "onERC721Received(address,address,uint256,bytes)",
          "releaseNFT(address,uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "XChainVault",
            "src": "contracts/XChainVault.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/XChainVault.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "XChainVault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/XChainVault.sol:20"
            },
            {
              "contract": "XChainVault",
              "label": "chainId",
              "type": "t_uint256",
              "src": "contracts/XChainVault.sol:22"
            },
            {
              "contract": "XChainVault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)5127_storage)",
              "src": "contracts/XChainVault.sol:25"
            },
            {
              "contract": "XChainVault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/XChainVault.sol:28"
            },
            {
              "contract": "XChainVault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/XChainVault.sol:29"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)5127_storage)": {
              "label": "mapping(uint256 => struct XChainVault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)5127_storage": {
              "label": "struct XChainVault.RecievedNFT",
              "members": [
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "wEth": {
        "src": "contracts/wEth.sol:6",
        "version": {
          "withMetadata": "a5a9aa07d0658dba43b4be377dd58f9e4afd1be57d898db58d4e066579b1c0cf",
          "withoutMetadata": "1d938e23f217d2884bd5add1887734ffc8e12e3ae3108238f75cf6ffd04f3dd2",
          "linkedWithoutMetadata": "1d938e23f217d2884bd5add1887734ffc8e12e3ae3108238f75cf6ffd04f3dd2"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "give(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "wEth",
            "src": "contracts/wEth.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "3040501509ca01a7c5abb9eb781266704331fe059b72cdf4722a56180d77610b",
          "withoutMetadata": "0010f962e09daf888d650878d3e43dea53ca964e075cec73d1829888e0c82f19",
          "linkedWithoutMetadata": "0010f962e09daf888d650878d3e43dea53ca964e075cec73d1829888e0c82f19"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "6278d05d34b4cc7a521f5f800035e8db96942c03874bda459ef58e5264eab6a6",
          "withoutMetadata": "27d383cd081af59b8ff10d140ccf17e9971dcd1d27d922c1bac6161e1264c6fd",
          "linkedWithoutMetadata": "27d383cd081af59b8ff10d140ccf17e9971dcd1d27d922c1bac6161e1264c6fd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "f7b277d1078e5f92dd63c59fa93ddbb0fd68b163d3cfc208489805aef7253986",
          "withoutMetadata": "cbfbd57aa3fb2bfe66aa47d8ae0aabbced973bfd7b46904df0e1a082407b9815",
          "linkedWithoutMetadata": "cbfbd57aa3fb2bfe66aa47d8ae0aabbced973bfd7b46904df0e1a082407b9815"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256,address)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "4e52862af0b9eafbc82cbd846d740ec5795e58c6452623544e676825559d6bc0",
          "withoutMetadata": "24834cfe207a952eae0465b133109761bf6314c896a2ac3c683172970ea75ed7",
          "linkedWithoutMetadata": "24834cfe207a952eae0465b133109761bf6314c896a2ac3c683172970ea75ed7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "d7618731a37f203123cff64af9a5e9baf60026bb92481eedf5f35ee0bf40f57a",
          "withoutMetadata": "402faf25636405b19a203397c8272aad6cb87afabe6c0044969c890a7ca45586",
          "linkedWithoutMetadata": "402faf25636405b19a203397c8272aad6cb87afabe6c0044969c890a7ca45586"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "3fd667b433ccc6f071f2067a633355491fd78e8cd16dec94a21ba63b0755b11c",
          "withoutMetadata": "402faf25636405b19a203397c8272aad6cb87afabe6c0044969c890a7ca45586",
          "linkedWithoutMetadata": "402faf25636405b19a203397c8272aad6cb87afabe6c0044969c890a7ca45586"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "e48f5236bfb2d6a7a4844781aa51d6202995122015c2f71aec60069038436e7d",
          "withoutMetadata": "e10ea318eb8435736504dd62ffc70b56a604bb2cbf23668c78c6b5711b3081a4",
          "linkedWithoutMetadata": "e10ea318eb8435736504dd62ffc70b56a604bb2cbf23668c78c6b5711b3081a4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "f2f2e95058adfc4541915b5f3eb0e03d7acd6f0dd947ee2bb276448a9ab057a9",
          "withoutMetadata": "02a6e6e4316d39f3c36621de2b17bf87da70995bf0b13892fa8c37a65e26cde1",
          "linkedWithoutMetadata": "02a6e6e4316d39f3c36621de2b17bf87da70995bf0b13892fa8c37a65e26cde1"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)",
              "src": "contracts/Vault.sol:38"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1056_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1056_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "f3bed605ce1c3bd89600f08da96d4396c9fa14beb814728ab93783894110418e",
          "withoutMetadata": "bfeaf5930a6c0548866f9c1756a2da767de494d3904a9d8db27b01ef1a1f0f52",
          "linkedWithoutMetadata": "bfeaf5930a6c0548866f9c1756a2da767de494d3904a9d8db27b01ef1a1f0f52"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)1020_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)1020_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)1020_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:9",
        "version": {
          "withMetadata": "802312c1d828654754860469fa8a076d094d44252b1c7a274494bdd25db9b86c",
          "withoutMetadata": "73a769d8f6a445152d5f78139da426585bf511e4c675041b109c845b3955e2af",
          "linkedWithoutMetadata": "73a769d8f6a445152d5f78139da426585bf511e4c675041b109c845b3955e2af"
        },
        "inherit": [
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:46"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:27"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:29"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1588_storage)",
              "src": "contracts/Vault.sol:37"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:40"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:43"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1588_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1588_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "95f5d18c14a4efab88c9c0060cab409388467c5d7d9332668263b0f8ba7f9560",
          "withoutMetadata": "901c144e489a1f9276aa0d069ba4e92341ea5d370150d710877319eb790dbb29",
          "linkedWithoutMetadata": "901c144e489a1f9276aa0d069ba4e92341ea5d370150d710877319eb790dbb29"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)1524_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)1524_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)1524_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "44d73c218bfb3b2b83958002590b6632afe7f921327da299ca1abd2efce0f61c",
          "withoutMetadata": "15bfec542ced269842fd9ddfae1e0c2c8b9d578f3f26927c4fa4063c430226b5",
          "linkedWithoutMetadata": "15bfec542ced269842fd9ddfae1e0c2c8b9d578f3f26927c4fa4063c430226b5"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/Vault.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:35",
        "version": {
          "withMetadata": "1b12814ea43f3d8d3aa3978e2c71b08b6bdd522ed095f27b26e804e19154e69a",
          "withoutMetadata": "5014442a0989131a20698a5c59ca1e016888de044a2aad5a3b08f78fbf528015",
          "linkedWithoutMetadata": "5014442a0989131a20698a5c59ca1e016888de044a2aad5a3b08f78fbf528015"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:75"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:56"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:58"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)2194_storage)",
              "src": "contracts/Vault.sol:66"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:69"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:72"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)2194_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)2194_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "2fe98621c092558e8a27da0df43e47591a2376ca50e1ea2de97c44484d564f91",
          "withoutMetadata": "4841b883f99018bf32f7914039f939ec10e381c8d929bea630fe02ed5d84545a",
          "linkedWithoutMetadata": "4841b883f99018bf32f7914039f939ec10e381c8d929bea630fe02ed5d84545a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)1524_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)1524_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)1524_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "6a3d73d9ad732624911cc667a27fb57f87451821d6d066fea8be895866cc924f",
          "withoutMetadata": "15bfec542ced269842fd9ddfae1e0c2c8b9d578f3f26927c4fa4063c430226b5",
          "linkedWithoutMetadata": "15bfec542ced269842fd9ddfae1e0c2c8b9d578f3f26927c4fa4063c430226b5"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "ad1b4901050ac5929cd1546d312a6013a5a637c9a1d6d78418ededdaff56a02d",
          "withoutMetadata": "deb0fb3b52c6935370ce4a416771b3135b026b55b44128813f0c05baede534c3",
          "linkedWithoutMetadata": "deb0fb3b52c6935370ce4a416771b3135b026b55b44128813f0c05baede534c3"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:51"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:32"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:34"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)2108_storage)",
              "src": "contracts/Vault.sol:42"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:48"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)2108_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)2108_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "50a5839e8fd47da894df224a1ca797b6c0f793dd33c4ef1b6e2ce9c72c267b28",
          "withoutMetadata": "cf405ecb0ea7c25b6a47e1de2029c0fdfddac983de87da8ff7512f7f5ab0e11d",
          "linkedWithoutMetadata": "cf405ecb0ea7c25b6a47e1de2029c0fdfddac983de87da8ff7512f7f5ab0e11d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)1524_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)1524_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)1524_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "bbd928ffd3a1e7b8fb7adec6af2adbf8aa92d6c2678694e4434203be97b6305c",
          "withoutMetadata": "76dc1b7d27669d3d2934403e87420a7ca1978e1419024ff5123b6a9923576291",
          "linkedWithoutMetadata": "76dc1b7d27669d3d2934403e87420a7ca1978e1419024ff5123b6a9923576291"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "1124a34b76dbfbf147babdf231b88c9e8dcae4b68c92ea47e4ab2a2d4c56ed58",
          "withoutMetadata": "2bc58adb7defe6a0d823bc6ff68067bf7df6d6651832f5d8e9db3e098f6c399d",
          "linkedWithoutMetadata": "2bc58adb7defe6a0d823bc6ff68067bf7df6d6651832f5d8e9db3e098f6c399d"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:51"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:32"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:34"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)2088_storage)",
              "src": "contracts/Vault.sol:42"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:48"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)2088_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)2088_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "394ac4931ddbc9b18447845072040b9094aaf97d52bc510752e2b0b96b4d2ff6",
          "withoutMetadata": "c6379b68c631ec0c2a56c38881e9e73e647deec96599f3372da6df72a70b99fd",
          "linkedWithoutMetadata": "c6379b68c631ec0c2a56c38881e9e73e647deec96599f3372da6df72a70b99fd"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:51"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:32"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:34"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1665_storage)",
              "src": "contracts/Vault.sol:42"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:48"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1665_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1665_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "9c161094bf68f5de6b63a68dfc8ced2d48e1d18b01571971da1d60d044378a61",
          "withoutMetadata": "c6379b68c631ec0c2a56c38881e9e73e647deec96599f3372da6df72a70b99fd",
          "linkedWithoutMetadata": "c6379b68c631ec0c2a56c38881e9e73e647deec96599f3372da6df72a70b99fd"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:51"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:32"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:34"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1665_storage)",
              "src": "contracts/Vault.sol:42"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:48"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1665_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1665_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "51177da88ee9f20e450548159b151d7b2586c9644a921a8be2b25b174b6b6ee6",
          "withoutMetadata": "6193009b07c7dfb59ba5edb3a4ffe4354f0c6b707103374df90b7b05cc0573e3",
          "linkedWithoutMetadata": "6193009b07c7dfb59ba5edb3a4ffe4354f0c6b707103374df90b7b05cc0573e3"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:51"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:32"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:34"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1665_storage)",
              "src": "contracts/Vault.sol:42"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:48"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1665_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1665_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "f3bed605ce1c3bd89600f08da96d4396c9fa14beb814728ab93783894110418e",
          "withoutMetadata": "bfeaf5930a6c0548866f9c1756a2da767de494d3904a9d8db27b01ef1a1f0f52",
          "linkedWithoutMetadata": "bfeaf5930a6c0548866f9c1756a2da767de494d3904a9d8db27b01ef1a1f0f52"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)1629_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)1629_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)1629_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "cdf5931b9e2720bde21548c15ac5930c4be3b1ed2512986d8b64e88d2be86c4d",
          "withoutMetadata": "6193009b07c7dfb59ba5edb3a4ffe4354f0c6b707103374df90b7b05cc0573e3",
          "linkedWithoutMetadata": "6193009b07c7dfb59ba5edb3a4ffe4354f0c6b707103374df90b7b05cc0573e3"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:50"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:31"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:33"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)2199_storage)",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:47"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)2199_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)2199_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "6c4f582a13570786b437f67453f3c94513c364f23a044df3bd96e5ef69fc0f10",
          "withoutMetadata": "c095aea4afe8824aa02e1c79ef0b2bcba92bb0f86abe45bec2ff3819e555fb1e",
          "linkedWithoutMetadata": "c095aea4afe8824aa02e1c79ef0b2bcba92bb0f86abe45bec2ff3819e555fb1e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)1524_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)1524_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)1524_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "f6f6d28e2c5c36a2ae706b50e3b4ff1219c1ef4a48e69ec73c4e64cbfd2d0376",
          "withoutMetadata": "76dc1b7d27669d3d2934403e87420a7ca1978e1419024ff5123b6a9923576291",
          "linkedWithoutMetadata": "76dc1b7d27669d3d2934403e87420a7ca1978e1419024ff5123b6a9923576291"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "9dd0f745b5f6f1f658454ede7bd4e9177d7a1b5835de5c395d80c282c0613124",
          "withoutMetadata": "c3ea329e87da12c3e37dde740ea5f45ae1fdda2deb97f520a0c82e78a0fdfeb4",
          "linkedWithoutMetadata": "c3ea329e87da12c3e37dde740ea5f45ae1fdda2deb97f520a0c82e78a0fdfeb4"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:51"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:32"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:34"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)2088_storage)",
              "src": "contracts/Vault.sol:42"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:48"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)2088_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)2088_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "024754a3833cdb42f53b5498310b91144d9b570756c6a6c33df4d6d0982c07eb",
          "withoutMetadata": "6193009b07c7dfb59ba5edb3a4ffe4354f0c6b707103374df90b7b05cc0573e3",
          "linkedWithoutMetadata": "6193009b07c7dfb59ba5edb3a4ffe4354f0c6b707103374df90b7b05cc0573e3"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:51"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:32"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:34"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1665_storage)",
              "src": "contracts/Vault.sol:42"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:48"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1665_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1665_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "f3bed605ce1c3bd89600f08da96d4396c9fa14beb814728ab93783894110418e",
          "withoutMetadata": "bfeaf5930a6c0548866f9c1756a2da767de494d3904a9d8db27b01ef1a1f0f52",
          "linkedWithoutMetadata": "bfeaf5930a6c0548866f9c1756a2da767de494d3904a9d8db27b01ef1a1f0f52"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)",
          "getBuckTokenAddr(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:14",
        "version": {
          "withMetadata": "19ba5c75a31956d6f5119b3733050c5a1ed233062abd16b6dd9a86740edb781b",
          "withoutMetadata": "82f388d65aa50cdc764cf73068d7ae085096b2b1f12f791e984c6f6db91d3821",
          "linkedWithoutMetadata": "82f388d65aa50cdc764cf73068d7ae085096b2b1f12f791e984c6f6db91d3821"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:27"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)847_storage)",
              "src": "contracts/Buckets.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)847_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)847_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "getNFTokenSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:13",
        "version": {
          "withMetadata": "52be282cc561fc2e9955337706c2f1528536aca1c7bff92f2920ca8573440695",
          "withoutMetadata": "6144f1e8d2fe6bbeb0891c07db47fe387add590fbfcb4dba1ecc18885350d606",
          "linkedWithoutMetadata": "6144f1e8d2fe6bbeb0891c07db47fe387add590fbfcb4dba1ecc18885350d606"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "createBucket(uint256[],string,string)",
          "calcBucketPrice(uint256,uint256)",
          "calcSellPrice(uint256,uint256)",
          "buyBucket(uint256,uint256)",
          "sellBucket(uint256,uint256)",
          "getBucket(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buckets",
            "src": "contracts/Buckets.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "vaultAddr",
              "type": "t_address",
              "src": "contracts/Buckets.sol:15"
            },
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:26"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)1622_storage)",
              "src": "contracts/Buckets.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)1622_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)1622_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:7",
        "version": {
          "withMetadata": "019d3480d7a547196a07f21539fe69e62468dc8912425d9afa9c983e71942370",
          "withoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e",
          "linkedWithoutMetadata": "ca71c6092b58bef4215fbe58ec52484e9d03ed752199cf4d2658193695b9355e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "51177da88ee9f20e450548159b151d7b2586c9644a921a8be2b25b174b6b6ee6",
          "withoutMetadata": "6193009b07c7dfb59ba5edb3a4ffe4354f0c6b707103374df90b7b05cc0573e3",
          "linkedWithoutMetadata": "6193009b07c7dfb59ba5edb3a4ffe4354f0c6b707103374df90b7b05cc0573e3"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:51"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:32"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:34"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)2132_storage)",
              "src": "contracts/Vault.sol:42"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:48"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)2132_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)2132_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:10",
        "version": {
          "withMetadata": "7314cc8f337e0b37bc02a0526cffb3ff624633349768d48593dff54ca3bb5a74",
          "withoutMetadata": "43e38dbf793521c5ec9b8162e7e0323eb23c10f98f0f66f6954e3763d9127eb8",
          "linkedWithoutMetadata": "43e38dbf793521c5ec9b8162e7e0323eb23c10f98f0f66f6954e3763d9127eb8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createBucket(uint256[],string,string)",
          "buyBucket(uint256,uint256)",
          "getBucket(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "bucketIdCounter",
            "src": "contracts/Buckets.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "bucketIdCounter",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:18"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)1482_storage)",
              "src": "contracts/Buckets.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)1482_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)1482_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "bucketId",
                  "type": "t_uint256"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Buckets.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:6",
        "version": {
          "withMetadata": "1f4792a5f42dad5f6b031b01afaaad7ab60b64a95f60c169f85f8d72f1a74b5e",
          "withoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6",
          "linkedWithoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "7e921dc43f64757abce85a5782f7088461482ef6f1054ec63f17ad9d7801a075",
          "withoutMetadata": "defe9ded0a4d25375a794c895e4853b4852c3ec367504fa520c1530769044ad6",
          "linkedWithoutMetadata": "defe9ded0a4d25375a794c895e4853b4852c3ec367504fa520c1530769044ad6"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:51"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:32"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:34"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1686_storage)",
              "src": "contracts/Vault.sol:42"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:48"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1686_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1686_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:6",
        "version": {
          "withMetadata": "1f4792a5f42dad5f6b031b01afaaad7ab60b64a95f60c169f85f8d72f1a74b5e",
          "withoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6",
          "linkedWithoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "eea96d3dda5ffa5d75d84c1b7cf652fe67ae2255928dba04028f439a36778dcc",
          "withoutMetadata": "cdb6ff36a4fffc6d1a2cfe5bf00b83b0409a361cb51f79bc94fdcab19664615d",
          "linkedWithoutMetadata": "cdb6ff36a4fffc6d1a2cfe5bf00b83b0409a361cb51f79bc94fdcab19664615d"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:51"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:32"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:34"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1527_storage)",
              "src": "contracts/Vault.sol:42"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:48"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1527_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1527_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Buckets": {
        "src": "contracts/Buckets.sol:5",
        "version": {
          "withMetadata": "d71a9c7725bdc5817dc28bc8122b9a1b2dd8f9481beb737af4c8129ad8c4fa7a",
          "withoutMetadata": "55ed0603760d3b9ee1cd4f218e44747ee45ebcbc74ec390d5769f705338e3d19",
          "linkedWithoutMetadata": "55ed0603760d3b9ee1cd4f218e44747ee45ebcbc74ec390d5769f705338e3d19"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createBucket(uint256[],uint256,uint256,uint256,string,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounterBuckets",
            "src": "contracts/Buckets.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Buckets",
              "label": "internalIdCounterBuckets",
              "type": "t_uint256",
              "src": "contracts/Buckets.sol:16"
            },
            {
              "contract": "Buckets",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)1473_storage)",
              "src": "contracts/Buckets.sol:18"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Bucket)1473_storage)": {
              "label": "mapping(uint256 => struct Buckets.Bucket)"
            },
            "t_struct(Bucket)1473_storage": {
              "label": "struct Buckets.Bucket",
              "members": [
                {
                  "label": "chain",
                  "type": "t_string_storage"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:6",
        "version": {
          "withMetadata": "1f4792a5f42dad5f6b031b01afaaad7ab60b64a95f60c169f85f8d72f1a74b5e",
          "withoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6",
          "linkedWithoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "9bedbb643ef237dca402310272df9863f2cbd20a5b6ab400bbc57007f68fdb60",
          "withoutMetadata": "d48b7de89d8d3e4b0f10dfb4edd805a5c3323d767a8369ab1511cbee6b1c7a18",
          "linkedWithoutMetadata": "d48b7de89d8d3e4b0f10dfb4edd805a5c3323d767a8369ab1511cbee6b1c7a18"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:51"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:32"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:34"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1676_storage)",
              "src": "contracts/Vault.sol:42"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:48"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1676_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1676_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:6",
        "version": {
          "withMetadata": "1f4792a5f42dad5f6b031b01afaaad7ab60b64a95f60c169f85f8d72f1a74b5e",
          "withoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6",
          "linkedWithoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "ff5cee686bab5dc0fc21d386ff1959171cff86422dac5780ee04934748f0215b",
          "withoutMetadata": "bcbb1888665e1d5f9d1d1923dbcdb44f62c4e0fedf0d0c9fd7c2184ca6cd661b",
          "linkedWithoutMetadata": "bcbb1888665e1d5f9d1d1923dbcdb44f62c4e0fedf0d0c9fd7c2184ca6cd661b"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "createBucket(uint256[],uint256,uint256,uint256,string,string)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:66"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:45"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounterBuckets",
            "src": "contracts/Vault.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:43"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounterBuckets",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:46"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1527_storage)",
              "src": "contracts/Vault.sol:54"
            },
            {
              "contract": "Vault",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)1545_storage)",
              "src": "contracts/Vault.sol:56"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:59"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:62"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:63"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1527_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1527_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Bucket)1545_storage)": {
              "label": "mapping(uint256 => struct Vault.Bucket)"
            },
            "t_struct(Bucket)1545_storage": {
              "label": "struct Vault.Bucket",
              "members": [
                {
                  "label": "chain",
                  "type": "t_string_storage"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:6",
        "version": {
          "withMetadata": "1f4792a5f42dad5f6b031b01afaaad7ab60b64a95f60c169f85f8d72f1a74b5e",
          "withoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6",
          "linkedWithoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "c0eae643f3a2d5934d0b886f158300849ddb918c1a12b4b38c1668b890318671",
          "withoutMetadata": "bcbb1888665e1d5f9d1d1923dbcdb44f62c4e0fedf0d0c9fd7c2184ca6cd661b",
          "linkedWithoutMetadata": "bcbb1888665e1d5f9d1d1923dbcdb44f62c4e0fedf0d0c9fd7c2184ca6cd661b"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "createBucket(uint256[],uint256,uint256,uint256,string,string)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:66"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:45"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounterBuckets",
            "src": "contracts/Vault.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:43"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounterBuckets",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:46"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1527_storage)",
              "src": "contracts/Vault.sol:54"
            },
            {
              "contract": "Vault",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)1545_storage)",
              "src": "contracts/Vault.sol:56"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:59"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:62"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:63"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1527_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1527_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Bucket)1545_storage)": {
              "label": "mapping(uint256 => struct Vault.Bucket)"
            },
            "t_struct(Bucket)1545_storage": {
              "label": "struct Vault.Bucket",
              "members": [
                {
                  "label": "chain",
                  "type": "t_string_storage"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:6",
        "version": {
          "withMetadata": "1f4792a5f42dad5f6b031b01afaaad7ab60b64a95f60c169f85f8d72f1a74b5e",
          "withoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6",
          "linkedWithoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "1e4b5dcf039299e03e796ccdc66f5322d792261f69e15ef9e2d06b9e96d09c95",
          "withoutMetadata": "bcbb1888665e1d5f9d1d1923dbcdb44f62c4e0fedf0d0c9fd7c2184ca6cd661b",
          "linkedWithoutMetadata": "bcbb1888665e1d5f9d1d1923dbcdb44f62c4e0fedf0d0c9fd7c2184ca6cd661b"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "createBucket(uint256[],uint256,uint256,uint256,string,string)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721XChainInternalId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:66"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:45"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounterBuckets",
            "src": "contracts/Vault.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:43"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounterBuckets",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:46"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1527_storage)",
              "src": "contracts/Vault.sol:54"
            },
            {
              "contract": "Vault",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)1545_storage)",
              "src": "contracts/Vault.sol:56"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:59"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:62"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:63"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1527_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1527_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Bucket)1545_storage)": {
              "label": "mapping(uint256 => struct Vault.Bucket)"
            },
            "t_struct(Bucket)1545_storage": {
              "label": "struct Vault.Bucket",
              "members": [
                {
                  "label": "chain",
                  "type": "t_string_storage"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "b8ac04f0de3e730d9d80080bdb2ba161728a9976e055aded660845af0dbc42ec",
          "withoutMetadata": "3e8c0c94e7745caf63d0adddcab94ea374c673fab9f561a79ea6345c9a9487ab",
          "linkedWithoutMetadata": "3e8c0c94e7745caf63d0adddcab94ea374c673fab9f561a79ea6345c9a9487ab"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721URIStorage": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:11",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721URIStorage",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "4633e7668bddc17b175766de0a0c8d6219b6304d2394c04405f7164bbc4dafd7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FixedMath": {
        "src": "contracts/FixedMath.sol:5",
        "version": {
          "withMetadata": "c084e63dc9a5aa1b34bc3fe902ca674ca64eea9c24caa463d882c4e3886627c1",
          "withoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce",
          "linkedWithoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "fixed1()",
          "fixed2()",
          "toFixed(int256)",
          "integer(int256)",
          "fractional(int256)",
          "mulPrecision()",
          "add(int256,int256)",
          "multiply(int256,int256)",
          "reciprocal(int256)",
          "divide(int256,int256)",
          "sqrt(int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Greeter": {
        "src": "contracts/Greeter.sol:6",
        "version": {
          "withMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1",
          "withoutMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1",
          "linkedWithoutMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1"
        },
        "inherit": [],
        "libraries": [
          "console"
        ],
        "methods": [
          "(string)",
          "greet()",
          "setGreeting(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Greeter",
            "src": "contracts/Greeter.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Greeter",
              "label": "greeting",
              "type": "t_string_storage",
              "src": "contracts/Greeter.sol:7"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Minter": {
        "src": "contracts/Minter.sol:8",
        "version": {
          "withMetadata": "686cd28732b1d66fae28a88574bb8221055c502b2c9e0383c0d3d4a1ec26e984",
          "withoutMetadata": "3c0e0bc9f14b37ca731b3960ba4af3521d772c191c4c5d23d99048158afde083",
          "linkedWithoutMetadata": "3c0e0bc9f14b37ca731b3960ba4af3521d772c191c4c5d23d99048158afde083"
        },
        "inherit": [
          "ERC721URIStorage",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "mint(address)",
          "safeTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Minter",
            "src": "contracts/Minter.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Minter",
              "label": "_tokenIds",
              "type": "t_struct(Counter)2502_storage",
              "src": "contracts/Minter.sol:10"
            }
          ],
          "types": {
            "t_struct(Counter)2502_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:6",
        "version": {
          "withMetadata": "1f4792a5f42dad5f6b031b01afaaad7ab60b64a95f60c169f85f8d72f1a74b5e",
          "withoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6",
          "linkedWithoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "a112176e019e0fffa96da2abfe83b5c7ebe4bf53414e7c4bd41959eb68481ce5",
          "withoutMetadata": "19ce7d652412aab0745a9adc39b706702344ddf02c9097176f5eb01b6031f12d",
          "linkedWithoutMetadata": "19ce7d652412aab0745a9adc39b706702344ddf02c9097176f5eb01b6031f12d"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "createBucket(uint256[],uint256,uint256,uint256,string,string)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,uint256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721ChainId(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:66"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:45"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounterBuckets",
            "src": "contracts/Vault.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:43"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:45"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounterBuckets",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:46"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)3450_storage)",
              "src": "contracts/Vault.sol:54"
            },
            {
              "contract": "Vault",
              "label": "buckets",
              "type": "t_mapping(t_uint256,t_struct(Bucket)3468_storage)",
              "src": "contracts/Vault.sol:56"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:59"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:62"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:63"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)3450_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)3450_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256"
                },
                {
                  "label": "xChainInternalId",
                  "type": "t_uint256"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Bucket)3468_storage)": {
              "label": "mapping(uint256 => struct Vault.Bucket)"
            },
            "t_struct(Bucket)3468_storage": {
              "label": "struct Vault.Bucket",
              "members": [
                {
                  "label": "chain",
                  "type": "t_string_storage"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                },
                {
                  "label": "NFTIds",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "XChainVault": {
        "src": "contracts/XChainVault.sol:7",
        "version": {
          "withMetadata": "640e663a62db5f385edeaa87481f6c0c05ee180a24d1b796c8659ab674d92e15",
          "withoutMetadata": "fe41b140642ad61f4eaabfd5aa599fd0b2be43ca73669084048f949721d7abb0",
          "linkedWithoutMetadata": "fe41b140642ad61f4eaabfd5aa599fd0b2be43ca73669084048f949721d7abb0"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "grantOracle(address)",
          "onERC721Received(address,address,uint256,bytes)",
          "releaseNFT(address,uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "XChainVault",
            "src": "contracts/XChainVault.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/XChainVault.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "XChainVault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/XChainVault.sol:20"
            },
            {
              "contract": "XChainVault",
              "label": "chainId",
              "type": "t_uint256",
              "src": "contracts/XChainVault.sol:22"
            },
            {
              "contract": "XChainVault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)4700_storage)",
              "src": "contracts/XChainVault.sol:25"
            },
            {
              "contract": "XChainVault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/XChainVault.sol:28"
            },
            {
              "contract": "XChainVault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/XChainVault.sol:29"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)4700_storage)": {
              "label": "mapping(uint256 => struct XChainVault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)4700_storage": {
              "label": "struct XChainVault.RecievedNFT",
              "members": [
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "wEth": {
        "src": "contracts/wEth.sol:6",
        "version": {
          "withMetadata": "a5a9aa07d0658dba43b4be377dd58f9e4afd1be57d898db58d4e066579b1c0cf",
          "withoutMetadata": "1d938e23f217d2884bd5add1887734ffc8e12e3ae3108238f75cf6ffd04f3dd2",
          "linkedWithoutMetadata": "1d938e23f217d2884bd5add1887734ffc8e12e3ae3108238f75cf6ffd04f3dd2"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "give(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "wEth",
            "src": "contracts/wEth.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "b8ac04f0de3e730d9d80080bdb2ba161728a9976e055aded660845af0dbc42ec",
          "withoutMetadata": "3e8c0c94e7745caf63d0adddcab94ea374c673fab9f561a79ea6345c9a9487ab",
          "linkedWithoutMetadata": "3e8c0c94e7745caf63d0adddcab94ea374c673fab9f561a79ea6345c9a9487ab"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721URIStorage": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:11",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721URIStorage",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "4633e7668bddc17b175766de0a0c8d6219b6304d2394c04405f7164bbc4dafd7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FixedMath": {
        "src": "contracts/FixedMath.sol:5",
        "version": {
          "withMetadata": "c084e63dc9a5aa1b34bc3fe902ca674ca64eea9c24caa463d882c4e3886627c1",
          "withoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce",
          "linkedWithoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "fixed1()",
          "fixed2()",
          "toFixed(int256)",
          "integer(int256)",
          "fractional(int256)",
          "mulPrecision()",
          "add(int256,int256)",
          "multiply(int256,int256)",
          "reciprocal(int256)",
          "divide(int256,int256)",
          "sqrt(int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Greeter": {
        "src": "contracts/Greeter.sol:6",
        "version": {
          "withMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1",
          "withoutMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1",
          "linkedWithoutMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1"
        },
        "inherit": [],
        "libraries": [
          "console"
        ],
        "methods": [
          "(string)",
          "greet()",
          "setGreeting(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Greeter",
            "src": "contracts/Greeter.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Greeter",
              "label": "greeting",
              "type": "t_string_storage",
              "src": "contracts/Greeter.sol:7"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Minter": {
        "src": "contracts/Minter.sol:8",
        "version": {
          "withMetadata": "686cd28732b1d66fae28a88574bb8221055c502b2c9e0383c0d3d4a1ec26e984",
          "withoutMetadata": "3c0e0bc9f14b37ca731b3960ba4af3521d772c191c4c5d23d99048158afde083",
          "linkedWithoutMetadata": "3c0e0bc9f14b37ca731b3960ba4af3521d772c191c4c5d23d99048158afde083"
        },
        "inherit": [
          "ERC721URIStorage",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "mint(address)",
          "safeTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Minter",
            "src": "contracts/Minter.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Minter",
              "label": "_tokenIds",
              "type": "t_struct(Counter)2502_storage",
              "src": "contracts/Minter.sol:10"
            }
          ],
          "types": {
            "t_struct(Counter)2502_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:6",
        "version": {
          "withMetadata": "1f4792a5f42dad5f6b031b01afaaad7ab60b64a95f60c169f85f8d72f1a74b5e",
          "withoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6",
          "linkedWithoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:11",
        "version": {
          "withMetadata": "a4e2bbd157b3626f0f57376a6d944e2e2d0997e89c3360ac1ad1f8b83a37f031",
          "withoutMetadata": "fc9e4ff6cf4bb4a449c916734b2e27d6c2a0a633a72ec4b9300fd98a66e1377e",
          "linkedWithoutMetadata": "fc9e4ff6cf4bb4a449c916734b2e27d6c2a0a633a72ec4b9300fd98a66e1377e"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,string)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721Chain(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:50"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:31"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:33"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)3448_storage)",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:47"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)3448_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)3448_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chain",
                  "type": "t_string_storage"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "XChainVault": {
        "src": "contracts/XChainVault.sol:7",
        "version": {
          "withMetadata": "b79fc265fe5bc69502975a4616a419cf7a0c18f1eb00ba6171cd4f57af13c5aa",
          "withoutMetadata": "7821d8081aa3d4f38bd37f6b78d2ce2104bfd825ab3229431d572a35dca83142",
          "linkedWithoutMetadata": "7821d8081aa3d4f38bd37f6b78d2ce2104bfd825ab3229431d572a35dca83142"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "grantOracle(address)",
          "onERC721Received(address,address,uint256,bytes)",
          "releaseNFT(address,uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "XChainVault",
            "src": "contracts/XChainVault.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/XChainVault.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "XChainVault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/XChainVault.sol:20"
            },
            {
              "contract": "XChainVault",
              "label": "chain",
              "type": "t_string_storage",
              "src": "contracts/XChainVault.sol:22"
            },
            {
              "contract": "XChainVault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)4579_storage)",
              "src": "contracts/XChainVault.sol:25"
            },
            {
              "contract": "XChainVault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/XChainVault.sol:28"
            },
            {
              "contract": "XChainVault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/XChainVault.sol:29"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)4579_storage)": {
              "label": "mapping(uint256 => struct XChainVault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)4579_storage": {
              "label": "struct XChainVault.RecievedNFT",
              "members": [
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "wEth": {
        "src": "contracts/wEth.sol:6",
        "version": {
          "withMetadata": "a5a9aa07d0658dba43b4be377dd58f9e4afd1be57d898db58d4e066579b1c0cf",
          "withoutMetadata": "1d938e23f217d2884bd5add1887734ffc8e12e3ae3108238f75cf6ffd04f3dd2",
          "linkedWithoutMetadata": "1d938e23f217d2884bd5add1887734ffc8e12e3ae3108238f75cf6ffd04f3dd2"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "give(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "wEth",
            "src": "contracts/wEth.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:6",
        "version": {
          "withMetadata": "1f4792a5f42dad5f6b031b01afaaad7ab60b64a95f60c169f85f8d72f1a74b5e",
          "withoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6",
          "linkedWithoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "9d3add32f9c725b2e582a41b06ef3fb4b6ee20c8023acd51db808b7ecd48ce4c",
          "withoutMetadata": "1d9fd2694b65361f892b4ad5e5d9934f3eae1351b82b2911d30afb4dd4505561",
          "linkedWithoutMetadata": "1d9fd2694b65361f892b4ad5e5d9934f3eae1351b82b2911d30afb4dd4505561"
        },
        "inherit": [
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:25"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:27"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)911_storage)",
              "src": "contracts/Vault.sol:33"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:36"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:39"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)911_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)911_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chain",
                  "type": "t_string_storage"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FixedMath": {
        "src": "contracts/FixedMath.sol:5",
        "version": {
          "withMetadata": "c084e63dc9a5aa1b34bc3fe902ca674ca64eea9c24caa463d882c4e3886627c1",
          "withoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce",
          "linkedWithoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "fixed1()",
          "fixed2()",
          "toFixed(int256)",
          "integer(int256)",
          "fractional(int256)",
          "mulPrecision()",
          "add(int256,int256)",
          "multiply(int256,int256)",
          "reciprocal(int256)",
          "divide(int256,int256)",
          "sqrt(int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:6",
        "version": {
          "withMetadata": "1f4792a5f42dad5f6b031b01afaaad7ab60b64a95f60c169f85f8d72f1a74b5e",
          "withoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6",
          "linkedWithoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "8b1e812ccab2d1e0bf9980c4f2e0c302635f2cf2ee75d05cbd0ae63767187b08",
          "withoutMetadata": "fab83fa41010f6ccf7d9e19b4d1092e4318e85c06a532617773b60a5807dba50",
          "linkedWithoutMetadata": "fab83fa41010f6ccf7d9e19b4d1092e4318e85c06a532617773b60a5807dba50"
        },
        "inherit": [
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [
          "FixedMath"
        ],
        "methods": [
          "(address)",
          "sigmoid(int256,int256,int256,int256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 3534,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 3560,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 3589,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 4006,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 4153,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 4301,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:27"
          },
          {
            "kind": "external-library-linking",
            "name": "FixedMath",
            "src": "contracts/FixedMath.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:25"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:27"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1369_storage)",
              "src": "contracts/Vault.sol:33"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:36"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:39"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1369_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1369_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chain",
                  "type": "t_string_storage"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FixedMath": {
        "src": "contracts/FixedMath.sol:5",
        "version": {
          "withMetadata": "c084e63dc9a5aa1b34bc3fe902ca674ca64eea9c24caa463d882c4e3886627c1",
          "withoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce",
          "linkedWithoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "fixed1()",
          "fixed2()",
          "toFixed(int256)",
          "integer(int256)",
          "fractional(int256)",
          "mulPrecision()",
          "add(int256,int256)",
          "multiply(int256,int256)",
          "reciprocal(int256)",
          "divide(int256,int256)",
          "sqrt(int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:6",
        "version": {
          "withMetadata": "1f4792a5f42dad5f6b031b01afaaad7ab60b64a95f60c169f85f8d72f1a74b5e",
          "withoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6",
          "linkedWithoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "521c75d51069e376947def9b88a72e5acd5408bad853275590dff4aeccac568d",
          "withoutMetadata": "7b5f0c47454c79f447c4bca4e2d553ad88473cd8a2dfc0efc6807416513fb2bd",
          "linkedWithoutMetadata": "7b5f0c47454c79f447c4bca4e2d553ad88473cd8a2dfc0efc6807416513fb2bd"
        },
        "inherit": [
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [
          "FixedMath"
        ],
        "methods": [
          "(address)",
          "sigmoid(int256,int256,int256,int256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 3585,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 3732,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 3879,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 4037,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 4199,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:27"
          },
          {
            "kind": "external-library-linking",
            "name": "FixedMath",
            "src": "contracts/FixedMath.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:25"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:27"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1369_storage)",
              "src": "contracts/Vault.sol:33"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:36"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:39"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1369_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1369_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chain",
                  "type": "t_string_storage"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FixedMath": {
        "src": "contracts/FixedMath.sol:5",
        "version": {
          "withMetadata": "c084e63dc9a5aa1b34bc3fe902ca674ca64eea9c24caa463d882c4e3886627c1",
          "withoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce",
          "linkedWithoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "fixed1()",
          "fixed2()",
          "toFixed(int256)",
          "integer(int256)",
          "fractional(int256)",
          "mulPrecision()",
          "add(int256,int256)",
          "multiply(int256,int256)",
          "reciprocal(int256)",
          "divide(int256,int256)",
          "sqrt(int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:6",
        "version": {
          "withMetadata": "1f4792a5f42dad5f6b031b01afaaad7ab60b64a95f60c169f85f8d72f1a74b5e",
          "withoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6",
          "linkedWithoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:10",
        "version": {
          "withMetadata": "76c5b83baa2a3a973ca19b8d9251609e63cb3e56002bd3bab15c24e93287df18",
          "withoutMetadata": "fab83fa41010f6ccf7d9e19b4d1092e4318e85c06a532617773b60a5807dba50",
          "linkedWithoutMetadata": "fab83fa41010f6ccf7d9e19b4d1092e4318e85c06a532617773b60a5807dba50"
        },
        "inherit": [
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [
          "FixedMath"
        ],
        "methods": [
          "(address)",
          "sigmoid(int256,int256,int256,int256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 3534,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 3560,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 3589,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 4006,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 4153,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 4301,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:27"
          },
          {
            "kind": "external-library-linking",
            "name": "FixedMath",
            "src": "contracts/FixedMath.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:25"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:27"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)1369_storage)",
              "src": "contracts/Vault.sol:33"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:36"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:39"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)1369_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)1369_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chain",
                  "type": "t_string_storage"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b76c4c2b9dac32e975510edd8b42c394557eef1d1d07ff626472134104b2b0f6",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "b8ac04f0de3e730d9d80080bdb2ba161728a9976e055aded660845af0dbc42ec",
          "withoutMetadata": "3e8c0c94e7745caf63d0adddcab94ea374c673fab9f561a79ea6345c9a9487ab",
          "linkedWithoutMetadata": "3e8c0c94e7745caf63d0adddcab94ea374c673fab9f561a79ea6345c9a9487ab"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721URIStorage": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:11",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721URIStorage",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "a03e767693b6471d369869fa6bac8de938f562897126be187ee8a278b7763b4b",
          "withoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf",
          "linkedWithoutMetadata": "fd593a2425c3ddc601e910a1ec9c85223b871631d8766db914e4c74a20421acf"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "4633e7668bddc17b175766de0a0c8d6219b6304d2394c04405f7164bbc4dafd7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FixedMath": {
        "src": "contracts/FixedMath.sol:5",
        "version": {
          "withMetadata": "c084e63dc9a5aa1b34bc3fe902ca674ca64eea9c24caa463d882c4e3886627c1",
          "withoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce",
          "linkedWithoutMetadata": "be3151b6c565ac325c4e966217f6ff7c974075b145d9ffc3c46471844e8c2cce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "fixed1()",
          "fixed2()",
          "toFixed(int256)",
          "integer(int256)",
          "fractional(int256)",
          "mulPrecision()",
          "add(int256,int256)",
          "multiply(int256,int256)",
          "reciprocal(int256)",
          "divide(int256,int256)",
          "sqrt(int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Greeter": {
        "src": "contracts/Greeter.sol:6",
        "version": {
          "withMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1",
          "withoutMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1",
          "linkedWithoutMetadata": "0d4fcb95cdd3a6aefea8a9d8475ee55e1ea478205ad06a4b3f632a24226c9ce1"
        },
        "inherit": [],
        "libraries": [
          "console"
        ],
        "methods": [
          "(string)",
          "greet()",
          "setGreeting(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Greeter",
            "src": "contracts/Greeter.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Greeter",
              "label": "greeting",
              "type": "t_string_storage",
              "src": "contracts/Greeter.sol:7"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Minter": {
        "src": "contracts/Minter.sol:8",
        "version": {
          "withMetadata": "686cd28732b1d66fae28a88574bb8221055c502b2c9e0383c0d3d4a1ec26e984",
          "withoutMetadata": "3c0e0bc9f14b37ca731b3960ba4af3521d772c191c4c5d23d99048158afde083",
          "linkedWithoutMetadata": "3c0e0bc9f14b37ca731b3960ba4af3521d772c191c4c5d23d99048158afde083"
        },
        "inherit": [
          "ERC721URIStorage",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "mint(address)",
          "safeTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Minter",
            "src": "contracts/Minter.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Minter",
              "label": "_tokenIds",
              "type": "t_struct(Counter)2502_storage",
              "src": "contracts/Minter.sol:10"
            }
          ],
          "types": {
            "t_struct(Counter)2502_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "NFToken": {
        "src": "contracts/NFToken.sol:6",
        "version": {
          "withMetadata": "1f4792a5f42dad5f6b031b01afaaad7ab60b64a95f60c169f85f8d72f1a74b5e",
          "withoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6",
          "linkedWithoutMetadata": "5aa55f59453eace33576f64ece5506caf69e6968b7f6368e4dbf519c5376eaf6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string)",
          "thirdPartyApprove(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFToken",
            "src": "contracts/NFToken.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:12",
        "version": {
          "withMetadata": "1f167dbac98a5822586da02791729d0fb1b26d343e8b6bbc790047a51ef30e84",
          "withoutMetadata": "0ee09aefac7e7393de5ecbf60f0969d5f6ff4345b7cc351cef02382b97c0e3a3",
          "linkedWithoutMetadata": "0ee09aefac7e7393de5ecbf60f0969d5f6ff4345b7cc351cef02382b97c0e3a3"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [
          "FixedMath"
        ],
        "methods": [
          "(address,address)",
          "grantOracle(address)",
          "registerXChainNFT(address,uint256,uint256,address,string)",
          "sigmoid(int256,int256,int256,int256)",
          "getwEthAddr()",
          "calculateAmountOfwEth(uint256,uint256)",
          "calculateAmountOfFrac(uint256,uint256)",
          "buyTokens(uint256,uint256,address)",
          "sellTokens(uint256,uint256,address)",
          "sellTokensIndividual(uint256,uint256)",
          "buyTokensIndividual(uint256,uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "mintTokensForNFT(uint256,string,string,uint256,uint256)",
          "buyoutERC721(uint256,address)",
          "getERC721Native(uint256)",
          "getERC721Chain(uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getNFTokenSupply(uint256)",
          "withdrawNFToken(uint256,address,uint256)",
          "getDepositAmount(uint256,address)",
          "depositNFToken(uint256,address,uint256)",
          "approveNFTokenTransfer(uint256,address,uint256)",
          "getNFTokenBalance(uint256,address)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getNFTContractAddr(uint256)",
          "getNFTokenAddr(uint256)",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 5219,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 5245,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 5274,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 5691,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 5838,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          },
          {
            "src": "contracts/FixedMath.sol",
            "name": "FixedMath",
            "length": 20,
            "start": 5986,
            "placeholder": "__$78827766868fbfa7b31de48993c6ed9f34$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:50"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/Vault.sol:33"
          },
          {
            "kind": "external-library-linking",
            "name": "FixedMath",
            "src": "contracts/FixedMath.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "wEthAddr",
              "type": "t_address",
              "src": "contracts/Vault.sol:31"
            },
            {
              "contract": "Vault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/Vault.sol:33"
            },
            {
              "contract": "Vault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)3450_storage)",
              "src": "contracts/Vault.sol:41"
            },
            {
              "contract": "Vault",
              "label": "deposits",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/Vault.sol:44"
            },
            {
              "contract": "Vault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Vault.sol:47"
            },
            {
              "contract": "Vault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Vault.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)3450_storage)": {
              "label": "mapping(uint256 => struct Vault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)3450_storage": {
              "label": "struct Vault.RecievedNFT",
              "members": [
                {
                  "label": "chain",
                  "type": "t_string_storage"
                },
                {
                  "label": "native",
                  "type": "t_bool"
                },
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "XChainVault": {
        "src": "contracts/XChainVault.sol:7",
        "version": {
          "withMetadata": "b79fc265fe5bc69502975a4616a419cf7a0c18f1eb00ba6171cd4f57af13c5aa",
          "withoutMetadata": "7821d8081aa3d4f38bd37f6b78d2ce2104bfd825ab3229431d572a35dca83142",
          "linkedWithoutMetadata": "7821d8081aa3d4f38bd37f6b78d2ce2104bfd825ab3229431d572a35dca83142"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "grantOracle(address)",
          "onERC721Received(address,address,uint256,bytes)",
          "releaseNFT(address,uint256)",
          "getERC721TokenId(uint256)",
          "getERC721ContractAddr(uint256)",
          "getInternalIdCounter()",
          "getNumberDepositedERC721s()",
          "getOwned(uint256)",
          "getNumIdsOwned(address)",
          "getOwnedInternalIds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "XChainVault",
            "src": "contracts/XChainVault.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "internalIdCounter",
            "src": "contracts/XChainVault.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "XChainVault",
              "label": "internalIdCounter",
              "type": "t_uint256",
              "src": "contracts/XChainVault.sol:20"
            },
            {
              "contract": "XChainVault",
              "label": "chain",
              "type": "t_string_storage",
              "src": "contracts/XChainVault.sol:22"
            },
            {
              "contract": "XChainVault",
              "label": "recievedNfts",
              "type": "t_mapping(t_uint256,t_struct(RecievedNFT)4646_storage)",
              "src": "contracts/XChainVault.sol:25"
            },
            {
              "contract": "XChainVault",
              "label": "ownedInternalIds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/XChainVault.sol:28"
            },
            {
              "contract": "XChainVault",
              "label": "numIdsOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/XChainVault.sol:29"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(RecievedNFT)4646_storage)": {
              "label": "mapping(uint256 => struct XChainVault.RecievedNFT)"
            },
            "t_struct(RecievedNFT)4646_storage": {
              "label": "struct XChainVault.RecievedNFT",
              "members": [
                {
                  "label": "internalId",
                  "type": "t_uint256"
                },
                {
                  "label": "nftAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "sender",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddr",
                  "type": "t_address"
                },
                {
                  "label": "tokenPrice",
                  "type": "t_uint256"
                },
                {
                  "label": "owned",
                  "type": "t_bool"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "wEth": {
        "src": "contracts/wEth.sol:6",
        "version": {
          "withMetadata": "a5a9aa07d0658dba43b4be377dd58f9e4afd1be57d898db58d4e066579b1c0cf",
          "withoutMetadata": "1d938e23f217d2884bd5add1887734ffc8e12e3ae3108238f75cf6ffd04f3dd2",
          "linkedWithoutMetadata": "1d938e23f217d2884bd5add1887734ffc8e12e3ae3108238f75cf6ffd04f3dd2"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "give(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "wEth",
            "src": "contracts/wEth.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}